# -*- coding: utf-8 -*-
"""appf

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UDkBXO6Sdx-9WyEVr33kjURq3aSP4fIe
"""

import streamlit as st
import pandas as pd
from gif3 import generate_gif
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload
import io

st.set_page_config(page_title="Calidad del Aire Bogot√°", layout="wide")
st.title("üå¨Ô∏è Calidad del Aire en Bogot√°")

# --- Subir JSON de credenciales ---
json_credentials = st.file_uploader("Sube tu archivo JSON de credenciales", type="json")

if json_credentials:
    creds = service_account.Credentials.from_service_account_info(
        pd.read_json(json_credentials),
        scopes=['https://www.googleapis.com/auth/drive']
    )
    service = build('drive', 'v3', credentials=creds)
    st.success("Conexi√≥n con Google Drive exitosa ‚úÖ")
else:
    st.warning("Sube tu archivo JSON de credenciales para acceder a los CSV de Drive.")

# Selecci√≥n de fecha
fecha_str = st.date_input("Seleccione la fecha").strftime("%Y-%m-%d")

# Funci√≥n para descargar CSV desde Drive
def descargar_csv(nombre_archivo):
    query = f"name='{nombre_archivo}'"
    resultados = service.files().list(q=query, fields="files(id, name)").execute()
    archivos = resultados.get('files', [])
    if not archivos:
        return None
    file_id = archivos[0]['id']
    request = service.files().get_media(fileId=file_id)
    fh = io.BytesIO()
    downloader = MediaIoBaseDownload(fh, request)
    done = False
    while not done:
        status, done = downloader.next_chunk()
    fh.seek(0)
    return pd.read_csv(fh, sep=';')

# Descargar archivos desde Drive
if json_credentials:
    archivo_aire = f"Datos_Aire_{fecha_str}.csv"
    archivo_met = f"Datos_Meteorologicos_{fecha_str}.csv"

    df_aire = descargar_csv(archivo_aire)
    df_met = descargar_csv(archivo_met)

    if df_aire is None or df_met is None:
        st.error("No se encontraron los archivos en Drive.")
    else:
        # Selecci√≥n de contaminante
        columnas_aire = df_aire.columns.tolist()
        posibles_contaminantes = [col for col in columnas_aire if col not in ['name', 'Hora']]
        contaminante = st.selectbox("Seleccione el contaminante", posibles_contaminantes)

        # Bot√≥n para generar GIF
        if st.button("Generar GIF"):
            st.info("Generando GIF...")
            gif_path = f"GIF_{contaminante}_{fecha_str}.gif"
            ruta_gif, df_air = generate_gif(df_aire, df_met, contaminante, gif_path)
            st.image(ruta_gif, caption=f"GIF de {contaminante} - {fecha_str}")

            # Botones de descarga
            with open(ruta_gif, "rb") as f:
                st.download_button("üì• Descargar GIF", data=f, file_name=f"GIF_{contaminante}_{fecha_str}.gif", mime="image/gif")

            csv_bytes = df_air.to_csv(index=False).encode('utf-8')
            st.download_button("üì• Descargar CSV", data=csv_bytes, file_name=f"Datos_Aire_{fecha_str}.csv", mime="text/csv")